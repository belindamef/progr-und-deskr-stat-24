---
fontsize: 8pt
format:
  beamer:
    include-in-header: ../Header.tex
citation_package: natbib
bibliography: ../Referenzen.bib
editor:
  render-on-save: true
---


```{r, include = T}
# | label: setup
# source("../R_common.R")
abb_dir = file.path(dirname(getwd()), "Abbildungen")
```


# Titelfolie {.plain}
\center
![](../Abbildungen/otto.png){width="20%"}

\vspace{2mm}

\Large
Programmierung und Deskriptive Statistik
\vspace{4mm}

\normalsize
BSc Psychologie WiSe 2023/24

\vspace{15mm}
\normalsize
Belinda Fleischmann

\vspace{3mm}
\scriptsize
Inhalte basieren auf [Programmierung und Deskriptive Statistik](https://www.ipsy.ovgu.de/ipsy_media/Methodenlehre+I/Wintersemester+2122/Programmierung+und+Deskriptive+Statistik/Vorlesungsfolien.pdf) von [Dirk Ostwald](https://www.ipsy.ovgu.de/Institut/Abteilungen+des+Institutes/Methodenlehre+I+_+Experimentelle+und+Neurowissenschaftliche+Psychologie/Team/Dirk+Ostwald.html), lizenziert unter [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/deed.de)



# (2) R und Visual Studio Code - Titelfolie {.plain}
\vfill
\center
\huge
\textcolor{black}{(2) R und Visual Studio Code Grundlagen}
\vfill


# AGENDA {.plain}
\large
\setstretch{2.5}
\vfill

R und Visual Studio Code

Arithmetik, Logik und Präzedenz

Variablen

Datenstrukturen

Übungen und Selbstkontrollfragen

TODO: Agenda überall einfügen



#
\large
\vfill
\setstretch{2.5}

**R und RStudio**

Arithmetik, Logik und Präzedenz

Variablen

Datenstrukturen

Übungen und Selbstkontrollfragen


# R und RStudio =========================================================== {.plain}
\AtBeginSection{}
\section{R und RStudio }

TODO: Aenda einfügen


# R und RStudio

\setstretch{2}
\large
\textcolor{darkblue}{Was ist R?}

\normalsize

* Eine Programmiersprache und ein Softwarepaket.
* Entwickelt von @ihaka_language_1996.
* Freier Dialekt der propietären Software S (@becker_new_1988).
* Weiterentwickelt und gepflegt durch [R Core Team](https://www.r-project.org/contributors.html) und
[R Foundation](https://www.r-project.org/foundation/)
* Interpretierte imperativ-objektorientierte 4GL Sprache.
* Optimiert und populär für statistische Datenanalysen.
* Große Community mit etwa 20.000 beigetragenen R Paketen (Erweiterungen)
* Evolviert und konservativ im Kern, konsistent und progressiv in
[R Paketen](https://cran.r-project.org/web/packages/).


# R und RStudio
\large
\textcolor{darkblue}{Wie bekommt man R?}
\normalsize

Runterladen (z.B. \url{https://cran.r-project.org/bin/windows/base/}) und installieren.
\vspace{2mm}

```{r Abb download R, echo = FALSE, out.width = "80%"}
knitr::include_graphics(file.path(abb_dir, "pds_2_r_download.png"))
```


# R und RStudio
\setstretch{1.5}
\large
\textcolor{darkblue}{Was kann man mit R machen?}
\small

* Datensätze laden, manipulieren, und speichern.
* Eine Vielzahl von Berechnungen an verschiedenen Datenstrukturen durchführen.
* Eine Vielzahl statistischer Analysemethoden auf Daten anwenden.
* Datenanalyseskripte schreiben und Abbildungen generieren.
* Präsentationen [RMarkdown](https://bookdown.org/yihui/rmarkdown/) und
Bücher [RBookdown](https://bookdown.org/yihui/bookdown/) erstellen.

\vspace{2mm}

\large
\textcolor{darkblue}{Was kann man mit R (bisher) nicht so gut machen?}
\small

* In einer ansprechenden Umgebung programmieren ($\Rightarrow$ RStudio).
* Scientific Computing ($\Rightarrow$ Python, Matlab, Julia).
* Psychologische Experimente programmieren ($\Rightarrow$ Python, Matlab)



# R und RStudio
\large
\textcolor{darkblue}{Wie bekommt man Hilfe zu R?}
\small

* Googlen
* \url{https://stackoverflow.com/}
* \url{https://www.r-project.org/help.html}
* Während der Programmierung und bei bekanntem Funktionsnamen über die Kommandozeile:
\footnotesize
    ```{r R Hilfe, eval = F, echo = T}
    ?mean                    # Zeigt Hilfe zu der Funktion "mean()"
    help(mean)               # Zeigt Hilfe zu der Funktion "mean()"
    browseVignettes()        # Zeigt Vignetten aller installierten Pakete im Browser
    browseVignettes("knitr") # Zeigt Vignetten des Paktes "knitr"
    ```
* \small \url{https://rseek.org/}
* \url{https://www.rstudio.com/resources/cheatsheets/}
* \url{https://www.r-bloggers.com/}



# R und RStudio
\setstretch{2}
\large
\textcolor{darkblue}{Was ist RStudio?}
\small

* Eine Softwareentwicklungsumgebung für R
* Softwareentwicklungsumgebung = Integrated Development Environment
* IDEs sind Programme zum Programmieren mit einer Programmiersprache
* Kommandozeile, Skripteditor, Vielzahl weiterer Tools
* Freemium Produkt von RStudio, Inc. (IDE frei, Server kostenpflichtig)
* Initial Release 2011, Affero General Public License
* Keine Verbindung zu R Core Team oder R Foundation
* RStudio wird im Oktober 2022 zu posit ([**posit.co**](https://posit.co/))



# R und RStudio
\large
\textcolor{darkblue}{Wie bekommt man RStudio?}
\vspace{1mm}

\small
Runterladen (\url{https://www.rstudio.com/products/rstudio/}) und installieren.
\vspace{2mm}

```{r Abb RStudio installieren, echo = FALSE, out.width = "80%"}
knitr::include_graphics(file.path(abb_dir, "pds_2_rstudio_download.png"))
```



# R und RStudio
\setstretch{1.6}
\vspace{2mm}
\large
\textcolor{darkblue}{Was kann man mit RStudio machen?}
\small

* R Skripte erzeugen, bearbeiten, und laufen lassen
* R Skripte in R Projekten organisieren

\vspace{3mm}
Laut Eigenwerbung:

* Access RStudio locally
* Syntax highlighting, code completion, and smart indentation
* Execute R code directly from the source editor
* Quickly jump to function definitions
* View content changes in real-time with the Visual Markdown Editor
* Easily manage multiple working directories using projects
* Integrated R help and documentation
* Interactive debugger to diagnose and fix errors
* Extensive package development tools



# R und RStudio
\large
\textcolor{darkblue}{Was kann man mit RStudio machen?}
\normalsize

Custom Layout via Tools $\rightarrow$ Global Options ...

```{r Abb 4 panels, echo = FALSE, out.width = "80%"}
knitr::include_graphics(file.path(abb_dir, "pds_2_rstudio_4panels.png"))
```



# R und RStudio
\large
\textcolor{darkblue}{Was kann man mit RStudio machen?}
\normalsize

Custom Layout via Tools $\rightarrow$ Global Options ...

```{r Abb custom layout, echo = FALSE, out.width = "80%"}
knitr::include_graphics(file.path(abb_dir, "pds_2_rstudio_settings.png"))
```



# R und RStudio
\large
\textcolor{darkblue}{Wie bekommt man Hilfe zu RStudio?}

\small
Googlen

Zur Einführung $\Rightarrow$ [Using the RStudio IDE](https://support.rstudio.com/hc/en-us/sections/200107586-Using-the-RStudio-IDE)

```{r Abb Hilfe RStudio, echo = FALSE, out.width = "70%"}
knitr::include_graphics(file.path(abb_dir, "pds_2_using_rstudio.png"))
```



# R und RStudio
\setstretch{1.7}
\large
\textcolor{darkblue}{R Kommandozeile $\vert$ Working in the Console}

\small
Die Basics:  
\footnotesize

* Eingabe von R Befehlen bei ```>```
* Autocomplete mit \fbox{Tab}
* Code ausführen mit \fbox{Enter}
* Vorherige Befehle mit Cursor \fbox{$\uparrow$}
* Bereinigen des Konsolenoutputs mit \fbox{Ctrl} + \fbox{L}
* Code Ausführungsstopp mit \fbox{Esc}

\vspace{2mm}
\small
Beispiel für einen Befehl:
\footnotesize

```{r Hello world console, eval=T, echo=T, indent="  "}
print("Hallo Welt!")
```

\vfill
\footnotesize
Anmerkung:  
\color{darkcyan} 
**Code-Snippets in diesen Folien immer aktiv in der Konsole nachvollziehen!**



# R und RStudio
\setstretch{1.4}
\large
\textcolor{darkblue}{R Skripte $\vert$ Executing and Editing Code}

\small
Neue .R Datei erstellen  
\vspace{-1pt}

\footnotesize 

* GUI: *File* $\rightarrow$ *New File* $\rightarrow$ *R Script* 
* Keyboard Shortcut: \fbox{Ctrl} + \fbox{Shift} + \fbox{N}  

\small
Bestehende .R Datei öffnen  
\vspace{-1pt}

\footnotesize 

* GUI: File $\rightarrow$ Open File 
* \fbox{Ctrl} + \fbox{O}

\vspace{2mm}
\small Code im .R Skript schreiben (Befehle in Programmiersprache formulieren)  


\vspace{1mm}
\footnotesize
```{r Hello World script, eval = F}
print("Hallo Welt!")  # Hinter Hashtags stehen dokumentierende Kommentare
print("Hallo R!")     # Kommentare werden nicht ausgefuehrt
```

\small
Befehle eines R Scripts ausführen
\vspace{-2mm}

\footnotesize
* Einzelnen Zeile, auf welcher der Cursor ruht: $\Rightarrow$ Run oder \fbox{Ctrl} + \fbox{Enter}
* Ausführen aller Zeilen: $\Rightarrow$ *Source* oder  \fbox{Ctrl} + \fbox{Shift} +  \fbox{Enter} oder $\Rightarrow$ Tickmark bei *Source on Save* setzen und \fbox{Ctrl} + \fbox{S}

\vfill
\footnotesize
Anmerkung:  
\color{darkcyan} **Code-Snippets in diesen Folien immer aktiv in einem R Skript dokumentieren!**


# R und RStudio
\setstretch{1.4}
\large
\textcolor{darkblue}{Das R und RStudio Data Science Universum}
\vspace{2mm}

```{r R Universum, echo = FALSE, out.width = "100%"}
knitr::include_graphics(file.path(abb_dir, "pds_2_rstudio_datascienceuniverse.pdf"))
```

# R und RStudio
\setstretch{1.4}
\large
\textcolor{darkblue}{Lehrmaterialien mit R und RStudio}
\vspace{2mm}

```{r Literatur, echo = FALSE, out.width = "80%"}
knitr::include_graphics(file.path(abb_dir, "pds_2_lehrmaterialien.pdf"))
```



#
\large
\vfill
\setstretch{2.5}

R und RStudio

**Arithmetik, Logik und Präzedenz**

Variablen

Datenstrukturen

Übungen und Selbstkontrollfragen


# Arithmetik, Logik und Präzedenz ======================================= {.plain}
\AtBeginSection{}
\section{Arithmetik, Logik und Präzedenz}

TODO: AGENDA einfügen


# R Konsole als Taschenrechner
\footnotesize
\vfill

\setstretch{0.7}
```{r echo = T, fiinclude = T}
#| label: addition
1 + 1
```
\vspace{4mm}
```{r}
#| label: multiplikation
2 * 3
```
\vspace{4mm}
```{r}
#| label: sqrt
sqrt(2)
```
\vspace{4mm}
```{r exp}
#| label: exp-funk
exp(0)
```
\vspace{4mm}
```{r log}
#| label: log-funk
log(1)
```

\vfill
Anmerkung:

\begin{itemize}
\item $[1]$ zeigt das erste und einzige Element des Ausgabevektors an
\item Vektoren werden noch im Detail behandelt.
\end{itemize}


# Arithmetische Operatoren
\setstretch{1.6}

\small
\begin{center}
\begin{tabular}{l|l}
Operator 		& Bedeutung 							\\\hline
$+$ 				& Addition 								\\
$-$ 				& Subtraktion 						\\
$*$ 				& Multiplikation 					\\
$/$ 				& Division 								\\
\^{} oder $**$    	& Potenz             					\\
\%$*$\% 			& Matrixmultiplikation 					\\
\%$/$\% 		    & Ganzzahlige Teilung (5\%$/$\%2 = 2)	\\
\%\% 			    & Modulo (5\%\%2 = 1)   				\\
\end{tabular}
\end{center}
\vspace{4mm}

\vfill
\footnotesize

* Matrixmultiplikation, Modulo, ganzzahlige Teilung benötigen wir zunächst nicht.
* Ganzzahlige Teilung gibt das Resultat der ganzzahligen Teilung an.
* Modulo gibt den ganzzahligen Rest bei ganzzahliger Teilung an.



# Logische Operatoren
\setstretch{1.6}

\small

* Die Boolesche Algebra und R kennen zwei *logische Werte*: TRUE und FALSE
* Bei Auswertung von Relationsoperatoren ergeben sich logische Werte

\small
\begin{center}
\begin{tabular}{l|l}
Relationsoperator 	& Bedeutung 							\\\hline
$==$ 				& Gleich 								\\
$!=$ 				& Ungleich 								\\
$<$, $>$			& Kleiner, Größer 						\\
$<=$, $>=$ 			& Kleiner gleich, Größer gleich			\\
$\vert$    			& ODER              					\\
$\&$    			& UND              						\\
\end{tabular}
\end{center}

\vfill
\footnotesize
* $<,<=,>,>=$ werden zumeist auf numerische Werte angewendet.
* $==,!=$ werden zumeist auf beliebige Datenstrukturen angewendet.
* $\vert$  und $\&$ werden zumeist auf logische Werte angewendet.
* $\vert$ implementiert das inklusive *oder*. Die Funktion xor() implementiert das exklusive ODER.


# Mathematische Funktionen
\setstretch{1.4}

\small
\begin{center}
\begin{tabular}{l|l}
Aufruf				& Bedeutung 								\\\hline
abs(x) 				& Betrag 									\\
sqrt(x) 			& Wurzel 									\\
ceiling(x)			& Aufrunden (ceiling(2.7) = 3)				\\
floor(x)		   	& Abrunden (floor(2.7) = 2)             	\\
round(x)  			& Mathematisches Runden	(round(2.5) = 2)	\\
exp(x) 				& Exponentialfunktion						\\
log(x)				& Logarithmus Funktion						\\
\end{tabular}
\end{center}


\vfill
\footnotesize

* Hierbei handelt es sich um eine Auswahl. Einen vollständigen Überblick gibt
    ```{r Funktionen, eval = F}
    names(methods:::.BasicFunsList)
    ```
* R unterscheidet formal nicht zwischen Operatoren und Funktionen
* Operatoren können mit der Infix Notation als Funktionen genutzt werden
    ```{r Infixnotation}
    `+`(2,3)            # Infixnotation für 2 + 3
    ```


# Operatorpräzedenz

\footnotesize
* Operatorrangfolge
* Regeln der Form "Punktrechnung geht vor Strichrechnung"
* Vordefinierte Operatorpräzedenz kann durch Klammern überschrieben werden
\setstretch{0.7}
    ```{r Praezedenz}
    2 * 3 + 4
    ```
\vspace{2mm}
    ```{r Praezedenz überschreiben}
    2 * (3 + 4)
    ```

\small
Generell gilt
\footnotesize

* Operatorrangfolge nicht raten oder folgern, sondern nachschauen!
* Lieber Klammern setzen, als keine Klammern setzen!
* Immer nachschauen, ob Berechnungen die erwarteten Ergebnisse liefern!

```{r, eval = F, indent = "     "}
?Syntax
```


# Operatorpräzedenz

Präzedenz und Ausführungsreihenfolge arithmetischer Operatoren

\small
\setstretch{1.3}
\begin{center}
\begin{tabular}{l|l}
Operator			& Reihenfolge 								\\\hline
\^{} 				& Rechts nach links							\\
$-$x,$+$x			& Unitäres Vorzeichen, links nach rechts	\\
$*$, $/$			& Links nach Rechts							\\
$+$, $-$			& Links nach Rechts							\\
\end{tabular}
\end{center}

\color{darkcyan}
Beispiele
\footnotesize
```{r Taschenrechnerbeispiele, eval = F}
2^2^3 			# 2^(2^3)  	= 2^8 = 256
(2^2)^3			# (2^2)^3  	= 4^3 = 64
-1^2 			# -(1^2)   	= -1
(-1)^2 			# (-1)^2   	=  1
2+3/4*5 		# 2+(3/4)*5 = 2+(0.75*5) = 2+3.75 = 5.75
2+3/(4*5)		# 2+3/(4*5) = 2+3/20 = 2+0.15 = 2.15
```


# Operatorpräzedenz
\vspace{3mm}
\footnotesize 

```{r Operatorpräzedenz}
?Syntax
```

```{r Operatorpräzedenz output, echo = FALSE, out.width = "60%"}
knitr::include_graphics(file.path(abb_dir, "pds_2_precedence.pdf"))
```


# Variablen ======================================= {.plain}
\AtBeginSection{}
\section{Variablen}

TODO: Agenda einfgen


# Variablen
\textcolor{darkblue}{Definition}
\vspace{5mm}

\small
In der Programmierung ist eine Variable ein abstrakter Behälter für eine Größe,
welche im Verlauf eines Rechenprozesses auftritt. Im Normalfall wird eine Variable
im Quelltext durch einen Namen bezeichnet und hat eine Adresse im Speicher
einer Maschine. Der durch eine Variable repräsentierte Wert kann – im Unterschied
zu einer Konstante – zur Laufzeit des Rechenprozesses verändert werden.

\begin{flushright}
\textit{Wikipedia}
\end{flushright}



# Variablen- Grundlagen
\small
\setstretch {1.5}

* Variablen sind vom Programmierenden benannte Platzhalter für Werte
* In 3GL Sprachen wird der Variablentyp durch eine Initialisierungsanweisung festgelegt:
```{r echo = T, eval = F}
VAR A : INTEGER     # A ist eine Variable vom Typ Integer (ganze Zahl)
```
* In 3GL Sprachen wird Variablen durch eine Zuweisungsanweisung ein Wert zugeschrieben:
    ```{r, eval = F}
    A := 1              # Der Variable A wird der numerische Wert 1 zugewiesen
    ```
In 4GL Sprachen wie Matlab, Python, R werden Variablen durch Zuweisung initialisiert:
    ```{r, eval = F}
    a = 1               # a ist eine Variable vom Typ double, ihr Wert ist 1
    ```
* Der Zuweisungsbefehl in Matlab und Python ist `=`, der Zuweisungsbefehl in R ist `<-`  oder `=`.
* Offiziell empfohlen für R ist `<-`, aus Kohärenzgründen benutzen wir hier `=`.


# Variablen - \textcolor{darkblue}{Beispiel}

\footnotesize
\justifying
\textcolor{darkblue}{Greta geht ins Schreibwarengeschäft und kauft vier Hefte, zwei Stifte und einen Füller. Wie viele analoge Gegenstände kauft Greta insgesamt?}

Wir definieren zunächst alle Variablen:

\vspace{1mm}
```{r Greta Beispiel}
hefte  = 4		# Definition der Variable 'hefte'  und Wertzuweisung 4
stifte = 2		# Definition der Variable 'stifte' und Wertzuweisung 2
fueller = 1		# Definition der Variable 'fueller' und Wertzuweisung 1
```

Nach Zuweisung existieren die Variablen im Arbeitsspeicher, dem sogenannten \textit{Workspace}. Die Variablen können jetzt wie Zahlen in Berechnungen genutzt werden
\vspace{1mm}

```{r}
gesamt  = hefte + stifte + fueller  # Berechnung der Gegenstandsanzahl
print(gesamt)
```

\vspace{1mm}

Ein Heft kostet einen Euro, ein Stift kostet zwei Euro, und ein Füller kostet 10 Euro. Wie viel Euro muss Greta insgesamt bezahlen?
\vspace{1mm}

```{r}
gesamtpreis	= hefte*1 + stifte*2 + fueller*10  # Berechung des Preises
print(gesamtpreis)
```
\vspace{1mm}

`print()` gibt Variablenwerte in der R Konsole aus.


# Workspace
\vspace{1mm}

\small
Nach Zuweisung werden Variablen automatisch im Workspace gespeichert. 

\footnotesize

* In der RStudio IDE wird das im *Environment* Pane angezeigt. 
* `ls()` zeigt die existierenden benutzbaren Variablen im Arbeitsspeicher an
\setstretch{0.9}
    ```{r}
    ls()						# Anzeigen aller Variablennamen im Workspace
    ```

\setstretch{1}
\small
Löschen von Variablen

\footnotesize

* `rm()` erlaubt das Löschen von Variablen
\setstretch{0.9}
    ```{r}
    rm(gesamtpreis)		        # Löschen der Variable Gesamtpreis
    ls()
    ```
* `rm(list=ls())` löscht alle Variablen
    ```{r}
    rm(list = ls()) 	        # Löschen aller Variablen
    ls()
    ```


# Workspace
\vfill
![](../Abbildungen/pds_2_workspace.pdf){width="90%"}


# Variablennamen
\setstretch{1.6}
\textcolor{darkblue}{Variablennamen}

\small
\vspace{2mm}

Zulässige Variablennamen

... bestehen aus Buchstaben, Zahlen, Punkten (.) und Unterstrichen (\_)

... beginnen mit einem Buchstaben oder . nicht gefolgt von einer Zahl

... dürfen keine reserverd words wie \textcolor{blue}{for}, \textcolor{blue}{if}, \textcolor{blue}{NaN}, usw. sein (`?reserved`)

... werden unter ?make.names() beschrieben

\vspace{1mm}

Sinnvoll
\vspace{2mm} Variablennamen

... sind kurz ($\approx$ 1 bis 9 Zeichen) und \textcolor{darkcyan}{aussagekräftig}

... bestehen nur aus Kleinbuchstaben und Unterstrichen

\vfill
\footnotesize
Anmerkung

* R ist *case-sensitive*. Das heißt z.B. x $\neq$ X


# \textcolor{darkblue}{Variablenrepräsentation $\vert$ Binding}

\vspace{3mm}
\footnotesize

```{r, eval = F}
x = 1
```

\setstretch{0.8}

\begin{itemize}
\item Intuitiv wird eine Variable genannt x mit dem Wert 1 erzeugt.
\item De-facto geschehen zwei Dinge: 
\begin{enumerate}
\footnotesize
  \item R erzeugt ein Objekt (Vektor mit Wert 1) mit Speicheradresse `0x1d888c1a800`.
  \item 2. R verbindet dieses Objekt mit dem Namen x, der das Objekt im Speicher referenziert.
\end{enumerate}
\end{itemize}

![](../Abbildungen/pds_2_binding_1.pdf){width="22%"}

\vspace{2mm}

```{r, eval = F}
y = x
```

\begin{itemize}
\item Intuitiv wird eine Variable genannt y mit Wert gleich dem Wert von x erzeugt.
\item De-facto wird ein neuer Name y erzeugt, der dasselbe Objekt referenziert wie x.
\item Das Objekt (Vektor mit Wert 1) wird nicht kopiert, R spart Arbeitsspeicher.
\end{itemize}

```{r, eval = F}
y = 1
```

\begin{itemize}
\item R erzeugt ein \textit{neues} Objekt (Vektor mit Wert 1) mit \textit{eigener} Speicheradresse `0x1da21b17843`.
\item De-facto wird ein neuer Name y erzeugt, der ein anderes Objekt referenziert wie x.
\end{itemize}

![](../Abbildungen/pds_2_binding_2.pdf){width="44%"}

\vspace{1mm}


# Variablen \textcolor{darkblue}{Speicheradressen $\vert$ object adress}

\setstretch{1}

\footnotesize

* Speicheraddressen können mit `lobstr::obj_addr()` angezeigt werden.
    ```{r}
    library(lobstr)   # Paket `lobstr` laden
    x = 1
    obj_addr(x)
    ```

* y bekommt die Zuweisung x. De-facto refenziert y dieselbe Speicheradresse wie x.
    ```{r}
    y = x
    obj_addr(y) 
    ```
* y bekommt die Zuweisung zu einem neuen Objekt (Vektor mit Wert 1). De-facto referenziert y eine andere Speicheradresse wie x.
    ```{r}
    y = 1
    obj_addr(y) 
    ```

\vfill


Anmerkungen:

* \justifying Ausdrücke der Art ```lobstr::obj_addr()``` referieren eine Funktion, in diesem Fall `obj_addr()`, bei gleichzeitiger Angabe des Pakets, in diesem Fall `lobbstr`. 
* Bevor Funktionen eines Pakets verwendet werden können, muss es mit `library()` geladen werden. Ausnahmen sind R Pakete, die per default geladen werden, z.B. `base`. 


# \textcolor{darkblue}{Variablenrepräsentation $\vert$ Copy-on-modify}
\vspace{2mm}
\footnotesize

```{r}
x = 1 		# Objekt (0x74b) erzeugt, x referenziert Speicheradresse des Objektes
y = x		  # y referenziert dieselbe Speicheradresse wie x (0x74b)
y = 3 		# y modifiziert, modifizierte Kopie (0xcd2) wird gespeichert
y        	# y referenziert jetzt (0xcd2)
```

```{r}
x           # x referenziert weiterhin (0x74b)
```

![](../Abbildungen/pds_2_copy_on_modify.pdf){width="70%"}


R Objekte sind \textit{immutable}, können also nicht verändert werden.


# \textcolor{darkblue}{Variablenrepräsentation $\vert$ Copy-on-modify}
\vspace{2mm}
\small

Zur Immutability gibt allerdings zwei Ausnahmen, genannt \textit{Modifications-in-place}

1. Objekte mit nur einem gebundenem Namen werden in-place modifiziert
\footnotesize
    ```{r, indent= "    "}
    x = c(1,2) # Objekt (0x74b) erzeugt, x referenziert Speicheradresse des Objektes
    x[1] = 2   # Objekt (0x74b) veraendert
    ```
   
   * \footnotesize Dieses Verhalten ist allerdings nur in R, nicht innerhalb RStudios reproduzierbar.
   
2. \small Environments werden in-place modifiziert ($\rightarrow$ Environments und Funktionen).

\vfill


# \textcolor{darkblue}{Variablenrepräsentation $\vert$ Unbinding und Garbage Collection}
\small

Copy-on-modify gilt auch in umgekehrter Reihenfolge

\footnotesize
```{r}
x = 1 		# Objekt (0x74b) erzeugt, x referenziert Speicheradresse  des Objektes
y = x		# y referenziert dieselbe Speicheradresse wie x (0x74b)
x = 3 		# Ein neues Objekt (0x2a08) wird erzeugt, x referenziert (0x2a08)
y           # y referenziert weiterhin  Objekt (0x74b)
```

![](../Abbildungen/pds_2_unbinding.pdf){width="56%"}

\vspace{-2mm}
\small
Unbinding
\footnotesize
```{r}
x = 1		#  x referenziert Objekt (0x74b)
x = "a"		#  x referenziert Objekt (0x2a08), Objekt (0x74b) jetzt ohne Referenz
```

\vspace{2mm}
\small
Garbage collection
\footnotesize
\vspace{-2mm}

* Nicht referenzierte Objekte im Arbeitsspeicher werden automatisch gelöscht.
* Das Löschen geschieht meist erst dann, wenn es wirklich nötig ist.
* Es ist nicht nötig, aktiv die Garbage Collection Funktion `gc()` zu benutzen.


# Datenstrukturen ======================================= {.plain}
\AtBeginSection{}
\section{Datenstrukturen}
\large
\vfill
\setstretch{2.5}


# Klassische Datenstrukturen einer 3GL Programmiersprache

\small
\textcolor{darkblue}{Fundamentale Datenstrukturen}

* Vordefiniert innerhalb der Programmiersprache
* Logische Werte (`logical`): TRUE, FALSE
* Ganze Zahlen (`integer`): int8 (-128,...,127), int16 (–32768,..., 32767)
* Gleitkommazahlen (single, double): 1.23456, 12.3456, 123.456, ...
* Zeichen (character): "a", "b", "c", "!"
* Datentyp-spezifische assoziierte Operationen
    * \small AND, OR (logical) +, - (integer) +,-,*, / (single), Zeichenkonkatenation (character)

\textcolor{darkblue}{Zusammengesetzte Datenstrukturen}

* Vordefinierte Container zur Zusammenfassung mehrerer Variablen gleichen Datentyps.  
(z.B. Vektoren, Listen, Arrays, Matrizen, ...) 
* Container-spezifische Operationen (z.B. Vektorindizierung, Matrixmultiplikation, ...)

\textcolor{darkblue}{Selbstdefinierte Datenstrukturen}

* Definition eigener Datenstrukturen aus vordefinierten Datenstrukturen und Containern
* Definition eigener Operationen


# Datenstrukturenkennenlernen beim Erlernen einer Programmiersprache

\small
\textcolor{darkblue}{Fundamentale Datenstrukturen}

* Welche fundamentalen Datenstrukturen bietet die Sprache an?
* Welche Operationen darauf sind bereits definiert?
* Wie lautet die Syntax zur Definition einer Variable eines fundamentalen Datentyps?
* Wie lautet die Syntax, um vordefinierte Operationen aufzurufen?

\textcolor{darkblue}{Zusammengesetzte Datenstrukturen}

* Welche Container und zugehörige Operationen bietet die Programmiersprache?
* Wie lautet die Syntax zum Umgang mit einem Container?

\textcolor{darkblue}{Selbstdefinierte Datenstrukturen}

* Wie erzeugt man selbstdefinierte Datenstrukturen und zugehörige Operationen?
* Wie lautet die Syntax zum Umgang mit einer selbstdefinierten Datenstruktur?

\vfill


# Organisation von Daten in R
\vspace{1mm}

Alles, was in R vorkommt, ist ein **Objekt**.
\vspace{1mm}

Jedem Objekt kann eindeutig zugeordnet werden:

\small 

* ein **Modus**
    * \small Atomar  $\,\,\vert$ Komponenten sind vom gleichen Datentyp.
    * Rekursiv $\vert$ Komponenten können von unterschiedlichem Datentyp sein.

* eine **Länge**

* optional weitere **Attribute**

\vfill


# Organisation von Daten in R
\vspace{1mm}

Alles, was in R vorkommt, ist ein **Objekt**.
\vspace{5mm}

![](../Abbildungen/pds_2_r_objektstruktur.pdf){width="80$%}

\vfill


# Übersicht der R Datentypen
\small
\setstretch{1.8}
\vspace{5mm}
\begin{center}
\begin{tabular}{l|l}
Datentyp
& Erläuterung
\\\hline
logical
& Die beiden logischen Werte TRUE und FALSE
\\
double
&
Gleitkommazahlen
\\
integer
& Ganze Zahlen
\\
complex
& Komplexe Zahlen, hier nicht weiter besprochen
\\
character
& Zeichen und Zeichenketten (strings), 'x' oder ``Hallo Welt!''
\\
raw
& Bytes, hier nicht weiter besprochen
\\
\end{tabular}
\end{center}
\vspace{2mm}

Double und integer werden zusammen auch als numeric bezeichnet.

Viele weitere Typen, hier relevant sind **logical**, **double**, **integer**, **character**.

\vfill


# Übersicht der R Datentypen
\footnotesize

Automatische Festlegung von Datentypen durch Zuweisung
\vspace{1mm}
\tiny
```{r}
b = TRUE					# logical
x = 2.5 					# double
y = 1L						# (long) integer
c = 'a' 					# character
```
\footnotesize
Testen von Datentypen durch `typeof()`
\setstretch{0.5}
\tiny
```{r}
typeof(b)
```
\vspace{1.5mm}
```{r}
typeof(x)
```
\vspace{1.5mm}
```{r}
typeof(y)
```
\vspace{1.5mm}
```{r}
typeof(c)
```
\vspace{2mm}
\footnotesize
Testen von Datetypen durch `is.*()`
\tiny
```{r}
is.logical(x)
```
\vspace{1.5mm}
```{r}
is.double(x)
```


# Übersicht atomare Datenstrukturen in R
\vspace{3mm}

\setstretch{2.5}
\begin{center}
\begin{tabular}{l|l}
Datenstruktur
& Erläuterung
\\\hline

Vektor
& Container von indizierten Komponenten identischen Typs
\\

Matrix
& Interpretation eines Vektors als zweidimensionaler Container
\\

Array
&  Interpretation eines Vektors als mehrdimensionaler Container

\end{tabular}
\end{center}
\vspace{3mm}

$\Rightarrow$ (3) Vektoren, Matrizen, Arrays

\vfill


# Übersicht rekursive Datenstrukturen in R

\setstretch{2.5}
\begin{center}
\begin{tabular}{l|l}
Datenstruktur
& Erläuterung
\\\hline

Liste
& Container von indizierten Komponenten beliebigen Datentyps
\\
& Insbesondere auch rekursive Struktur, z.B. Liste von Listen
\\

Dataframe
& Symbiose aus Liste und Matrix
\\
& Jede Komponente ist Vektor beliebigen Datentyps identischer Länge
\\
\end{tabular}
\end{center}
\vspace{3mm}

$\Rightarrow$ (4) Listen und Dataframes

\vfill


# Übungen und Selbstkontrollfragen ======================================= {.plain}
\AtBeginSection{}
\section{Übungen und Selbstkontrollfragen}

\large
\vfill
\setstretch{2.5}

R und RStudio

Arithmetik, Logik und Präzedenz

Variablen

Datenstrukturen

**Übungen und Selbstkontrollfragen**


# Übungen und Selbstkontrollfragen
\footnotesize
\setstretch{1.6}

1. Installieren Sie R und RStudio auf Ihrem Rechner.
2. Führen Sie die Befehlssequenz auf Folie \textcolor{darkblue}{R Skripte $\vert$ Executing and Editing Code} aus.
3. Dokumentieren Sie die in dieser Einheit eingeführten R Befehle in einem kommentierten R Skript.
4. Erläutern Sie den Begriff der Operatorpräzedenz.
5. Definieren Sie den Begriff der Variable im Kontext der Programmierung.
6. Erläutern Sie die Begriffe Initialisierungsanweisung und Zuweisungsanweisung für Variablen.
7. Erläutern Sie den Begriff Workspace.
8. Geben Sie jeweils ein Beispiel für einen zulässigen und einen unzulässigen Variablennamen in R.
9. Erläutern Sie die Prozesse, die R im Rahmen einer Zuweisungsanweisung der Form x = 1 durchführt.
10. Erläutern Sie den Begriffe Copy-on-modify und Modify-in-place.
11. Diskutieren Sie die klassischen Datenstrukturen einer 3GL Programmiersprache.
12. Diskutieren Sie die Organisation von Datenstrukturen in R.
13. Wodurch unterscheiden sich eine atomare und ein rekursive Datenstruktur in R?
14. Nennen und erläutern Sie vier zentrale Datentypen in R.
15. Nennen und erläutern Sie vier zentrale atomare Datenstrukturen in R.
16. Nennen und erläutern Sie zwei zentrale rekursive Datenstrukturen in R.


# References
\footnotesize
