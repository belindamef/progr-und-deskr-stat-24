# Titelfolie {.plain}
\center
![](../Abbildungen/otto.png){width="20%"}

\vspace{2mm}

\Large
Programmierung und Deskriptive Statistik
\vspace{4mm}

\normalsize
BSc Psychologie WiSe 2023/24

\vspace{15mm}
\normalsize
Belinda Fleischmann

\vspace{3mm}
\scriptsize
Inhalte basieren auf [Programmierung und Deskriptive Statistik](https://www.ipsy.ovgu.de/ipsy_media/Methodenlehre+I/Wintersemester+2122/Programmierung+und+Deskriptive+Statistik/Vorlesungsfolien.pdf) von [Dirk Ostwald](https://www.ipsy.ovgu.de/Institut/Abteilungen+des+Institutes/Methodenlehre+I+_+Experimentelle+und+Neurowissenschaftliche+Psychologie/Team/Dirk+Ostwald.html), lizenziert unter [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/deed.de)


# Termine {.plain}
\setstretch{1.3}
\vfill
\center
\footnotesize

\renewcommand{\arraystretch}{1.1}
\begin{tabular}{lll}
Datum          & Einheit               & Thema		                            \\\hline
11.10.23       & Einführung            & (1) Einführung \\
18.10.23       & R Grundlagen          & (2) R und Visual Studio Code           \\
25.10.23       & R Grundlagen          & (2) R und Visual Studio Code           \\
\textbf{01.11.23}       & \textbf{R Grundlagen}          & \textbf{(3) Vektoren}\\
08.11.23       & R Grundlagen          & (4) Matrizen                           \\
15.11.23       & R Grundlagen          & (5) Listen und Dataframes              \\
22.11.23       & R Grundlagen          & (6) Datenmanagement                    \\
39.11.23       & R Grundlagen          & (7) Häufigkeitsverteilungen            \\
06.12.23       & R Grundlagen          & (8) Verteilungsfunktionen und Quantile \\
13.12.23       & Deskriptive Statistik & (9) Maße der zentralen Tendenz         \\
20.12.23       & Deskriptive Statistik & (10) Maße der Datenvariabilität        \\
20.12.23       & \textit{Leistungsnachweis Teil 1}        \\
               & \textcolor{gray}{Weihnachtspause}                              \\
10.01.24       & Deskriptive Statistik & (11) Anwendungsbeispiel (Deskriptive Statistik)                   \\
17.01.24       & Inferenzstatistik     & (12) Anwendungsbeispiel (Parameterschätzung, Konfidenzintervalle) \\
24.01.24       & Inferenzstatistik     & (13) Anwendungsbeispiel (Hypothesentest)                          \\
25.01.24       & \textit{Leistungsnachweis Teil 2}                          \\\hline
\end{tabular}


# (3) Vekotren - Titelfolie {.plain}

\vfill
\huge
\begin{center}
(3) Vektoren
\end{center}
\vfill


# AGENDA {.plain}
\large
\setstretch{2.5}
\vfill

Übersicht und Erzeugung

Charakterisierung

Indizierung

Arithmetik

Attribute

Übungen und Selbstkontrollfragen


# Erzeugung ====================================== {.plain}
\AtBeginSection{}
\section{Erzeugung}

\large
\setstretch{2.5}
\vfill

**Übersicht und Erzeugung**

Charakterisierung

Indizierung

Arithmetik

Attribute

Übungen und Selbstkontrollfragen


# Übersicht
\setstretch{1.5}


\small

\begin{itemize}
\item R operiert mit \textit{Datenstrukturen} (z.B. Vektoren, Matrizen, Listen und Dataframes).
\item Die einfachste dieser Datenstrukturen ist ein Vektor.
\item Vektoren sind geordnete Folgen von Datenwerten, die in \underline{einem} Objekt zusammengefasst sind und \underline{einem} Variablennamen zugewiesen sind.
\item Die einzelnen Datenwerte eines Vektors heißen \textit{Elemente} des Vektors.
\item Vektoren, deren Elemente alle vom gleichen Datentyp sind, heißen \textbf{atomar}.
\item Die zentralen Datentypen sind \textbf{numeric} (\textbf{double}, \textbf{integer}),  \textbf{logical},  \textbf{character}
\end{itemize}

\vspace{1mm}
![](../Abbildungen/pds_3_atomic_vectors.pdf){width="90%"}

* Mit dem Begriff **Vektor** ist hier immer ein **atomarer Vektor** gemeint.

\vfill



# Elementarwerte

\setstretch{1.3}
\small
**Numeric**

\footnotesize
Per default werden numerische Werte (mit oder ohne Dezimalstellen) als double initialisiert. Dezimalzahlen können in Dezimalnotation oder wissenschaftlicher Notation spezifiziert werden. Weitere mögliche Werte sind Inf, -Inf, und NaN (Not-a-Number).
\vspace{1mm}
\tiny
```{r, eval = F}
#| label: Elementarwerte Beispiele
h <- 1                    # Einelementiger Vektor vom Typ double (1)
i <- 2.1e2                # Einelementiger Vektor vom Typ double (210)
j <- 2.1e-2               # Einelementiger Vektor vom Typ double (0.021)
k <- Inf                  # Einelementiger Vektor vom Typ double (unendlich)
l <- NaN                  # Einelementiger Vektor vom Typ double (NaN)
```  

\footnotesize
Integer werden wie double ohne Dezimalstellen spezifiziert, gefolgt von einem L (long integer).
\vspace{1mm}
\tiny
```{r, eval = F}
#| label: Integer Beispiele
x <- 1L                   # Einelementiger Vektor vom Typ integer
y <- 200L                 # Einelementiger Vektor vom Typ integer
```

\small
**Logical**

\footnotesize
TRUE oder FALSE, abgekürzt T oder F.
\vspace{1mm}
\tiny
```{r, eval = F}
#| label: Boolesche Werte Beispiele
x <- TRUE                 # Einelementiger Vektor vom Typ logical
y <- F                    # Einelementiger Vektor vom Typ logical
```

\small
**Character**

\footnotesize
Anführungszeichen ("a") oder Hochkommata ('a').
\vspace{1mm}
\tiny
```{r, eval = F}
#| label: character Beispiele
x <- "a"                  # Einelementiger Vektor vom Typ character
y <- 'test'               # Einelementiger Vektor vom Typ character
```


# Erzeugung mehrelementiger Vektoren

\small
Direkte Konkatenation von Elementarwerten mit `c()`

\tiny
```{r, eval = F}
#| label: Mehelementige Vektoren Beispiele
x <- c(1, 2, 3)                    # numeric vector [1,2,3]
y <- c(0, x, 4)                    # numeric vector [0,1,2,3,4]
s <- c("a", "b", "c")              # character vector ["a", "b", "c"]
l <- c(TRUE, FALSE)                # logical  vector [TRUE, FALSE]
```

* \footnotesize Beachte: `c()` konkateniert die Eingabeargumente und erzwingt einen einheitlichen Datentyp (vgl. coercion)
\tiny
  ```{r, eval = F}
  #| label: Beispiel coercion
  x <- c(1, "a", TRUE)         # character vector ["1", "a", "TRUE"]
  ```

\small
Erzeugen "leerer" Vektoren mit `vector()`

\tiny
```{r, eval = F}
#| label: Beispiel leere Vektoren mit vector()
v <- vector("double", 3)           # double vector [0,0,0]
w <- vector("integer", 3)          # integer vector [0,0,0]
l <- vector("logical", 2)          # logical vector [FALSE, FALSE]
s <- vector("character", 4)        # character vector ["", "", "", ""]
```

\small
Erzeugen "leerer" Vektoren mit double(), integer(), logical(), character()

\tiny
```{r, eval = F}
#| label: Beispiel leere Vektoren typspezifisch
v <- double(3)                     # double vector [0,0,0]
w <- integer(3)                    # integer vector [0,0,0]
l <- logical(2)                    # logical vector [FALSE, FALSE]
s <- character(4)                  # character vector ["", "", "", ""]
```


# Erzeugung von Vektoren als Sequenzen

\small
Erzeugen von ganzzahligen Sequenzen mithilfe des **Colonoperators** `:`

`a:b` erzeugt ganzzahlige Sequenzen von a (inklusive) bis b (maximal)

\tiny
```{r, eval = F}
#| label: Vektor erzeugen mit colon
x <- 0:5                         # [0, 1, 2, 3, 4, 5]
y <- 1.5:6.1                     # [1.5, 2.5, 3.5, 4.5, 5.5]
```

\small
Erzeugen von Sequenzen mit `seq()`

`seq(from, to, by = ((to - from)/(len - 1), len = NULL, ...)`

\tiny
```{r, eval = F}
#| label: Vektor erzeugen mit seq()
x_1 <- seq(0, 5)                 # wie `0:5`, ganzzahlige Sequenz zw. 0 (inkl.) und 5 (max)
                                 # [0, 1, 2, 3, 4, 5]
x_2 <- seq(0, 1, len = 5)        # 5 Zahlen zwischen 0 (inkl.) und 1 (inkl.), equidistant
                                 # [0.00, 0.25, 0.50, 0.75, 1.00]
x_3 <- seq(0, 2, by = .15)       # 0.15 Schritte zwischen 0 (inkl.) und 2 (max.)
                                 # [0.00, 0.15, 0.30, ..., 1.50 1.65 1.80 1.95]
x_4 <- seq(1, 0, by = -.1)       # -0.1 Schritte zwischen 1 (inkl.) und 0 (min.)
                                 # [1.0 0.9 0.8 0.7 0.6 0.5 0.4 0.3 0.2 0.1 0.0]
```

\small
`seq.int()`, `seq_len()`, `seq_along()`  als weitere Varianten

\tiny
```{r, eval = F}
#| label: weitere Funktionen zur Vektorerzeugung
x_1 <- seq.int(0, 5)             # wie `0:5`, ganzzahlige Sequenz zw. 0 (inkl.) und 5 (max)
                                 # [0, 1, 2, 3, 4, 5]
x_2 <- seq_len(5)                # Natürliche Zahlen bis 5, [1, 2, 3, 4, 5]
x_3 <- seq_along(c("a", "b"))    # wie `seq_len(length(c("a", "b")))`
```


# Charakterisierung ====================================== {.plain}
\AtBeginSection{}
\section{Charakterisierung}

\large
\setstretch{2.5}
\vfill

Übersicht und Erzeugung

**Charakterisierung**

Indizierung

Arithmetik

Attribute

Übungen und Selbstkontrollfragen


# Vektoreigenschaften ausgeben
\setstretch{0.9}
\small

`length()` gibt die Anzahl der Elemente eines Vektors aus
\tiny
```{r, eval = T}
#| label: Beispiel length()
x <- 0:10          # Vektor
length(x)          # Anzahl der Elemente des Vektors
```
\vspace{2mm}
\small
`typeof()` gibt den elementaren Datentyp eines Vektors aus

\tiny
```{r, eval = T}
#| label: Beispiel typeof() 1/2
x <- 1:3L          # Vektor
typeof(x)          # Datentyp des atomic vectors
```
\vspace{2mm}
```{r, eval = T}
#| label: Beispiel typeof() 2/2
y <- c(T, F, T)    # Vektor
typeof(y)          # Der Datentyp des atomic vectors
```
\vspace{2mm}

\indent Anmerkung:
`mode()` und `storage.mode()` werden nicht empfohlen, sie existieren für S Kompatibilität.

\vspace{3mm}
\small
`is.logical()`, `is.double()`, `is.integer()`, `is.character()` testen den Datentyp

\tiny
```{r, eval = T}
#| label: Beispiel typetest mit is.double()
is.double(x)       # Testen, ob der x vom Typ double ist
```
\vspace{2mm}
```{r, eval = T}
#| label: Beispiel typetest mit is.logical()
is.logical(y)      # Testen, ob der y vom Typ logical ist
```


# Datentypangleichung (Coercion)

\vspace{2mm}
\setstretch{0.9}

\small
Bei Konkatenation verschiedener Datentypen wird ein einheitlicher Datentyp erzwungen. Es gilt 

\center
character $>$ double $>$ integer $>$ logical
\vspace{2mm}

\justifying
\footnotesize
\vspace{3mm}

```{r, eval = T}
#| label: coersion bei gemischter Vektor 1/2
x <- c(1.2, "a")     # Kombination gemischter Datentypen (character schlägt double)
x
typeof(x)            # Erzeugter Vektor ist vom Datentyp character
```
\vspace{2mm}

```{r, eval = T}
#| label: coersion bei gemischter Vektor 2/2
y <- c(1L, TRUE)     # Kombination  gemischter Datentypen (integer schlägt logical)
y
typeof(y)            # Erzeugter Vektor ist vom Typ integer
```

\vfill


# Datentypangleichung (Coercion)
\vspace{2mm}
\setstretch{1.2}

\justifying
\small
**Explizite** Coercion mit `as.logical()`, `as.integer()`, `as.double()`, `as.character()`
\vspace{1mm}

\footnotesize
```{r, eval = T}
#| label: Explizite Coercion
x <- c(0, 1, 1, 0)        # double Vektor
y <- as.logical(x)        # Umwandlung in logical Vektor
y
```

\vspace{3mm}
\small
Coercion geschieht aber auch oft **implizit**:
\vspace{1mm}

\footnotesize
```{r, eval = T}
#| label: Implizite Coercion
x <- c(T, F, T, T)        # logical Vektor
s <- sum(x)               # Summation wandelt logical Elemente automatisch in integer
s
```

\vfill


# Indizierung ====================================== {.plain}
\AtBeginSection{}
\section{Indizierung}

\large
\setstretch{2.5}
\vfill

Übersicht und Erzeugung

Charakterisierung

**Indizierung**

Arithmetik

Attribute

Übungen und Selbstkontrollfragen



# Indizierung
\setstretch{1.5}

\normalsize
\textcolor{darkblue}{Grundlagen}
\vspace{-2mm}

\small

* Einzelne oder mehrere Vektorkomponenten werden durch Indizierung adressiert.
* Indizierung wird auch Indexing, Subsetting, oder Slicing genannt.
* Zur Indizierung werden eckige Klammern [$\,\,$] benutzt.
* Indizierung kann zur Kopie oder Manipulation von Komponenten benutzt werden.
* Der Index des ersten Elements ist 1 (nicht 0, wie in anderen Sprachen).

\vspace{1mm}
\normalsize
\textcolor{darkcyan}{Beispiel}
\tiny
```{r, eval = F}
#| label: Indizierung Beispiel
x <- c("a", "b", "c")   # character vector ["a", "b", "c"]
y <- x[2]               # Kopie von "b" (neues Object), referenziert von y
x[3] <- "d"             # Aenderung von x zu x = ["a", "b", "d"]
```

\vspace{1mm}
\normalsize
\textcolor{darkblue}{Prinzipien der Indizierung in R}

\small

* Ein **Vektor positiver Zahlen** adressiert entsprechende Komponenten.
* Ein **Vektor negativer Zahlen** adressiert komplementäre Komponenten.
* Ein **logischen Vektor** adressiert die Komponenten mit TRUE.
* Ein **character Vektor** adressiert benannte Komponenten.


# \textcolor{darkcyan}{Beispiele}

\footnotesize
Indizierung mit einem **Vektor positiver Zahlen**
```{r, eval = F}
#| label: Bsp positiv Zahlen
x <- c(1, 4, 9, 16, 25)   # [1, 4, 9, 16, 25] = [1^2, 2^2, 3^2, 4^2, 5^2]
y <- x[1:3]               # `1:3` erzeugt Vektor [1, 2, 3], x[1:3] = x[c(1,2,3)] = [1,4,9]
z <- x[c(1, 3, 5)]        # `c(1, 3, 5)` erzeugt Vektor [1, 3, 5], x[c(1, 3, 5)] = [1, 9, 25]
```

Indizierung mit einem **Vektor negativer Zahlen**
```{r, eval = F}
#| label: Bsp negative Zahlen
x <- c(1, 4, 9, 16, 25)   # [1, 4, 9, 16, 25] = [1^2, 2^2, 3^2, 4^2, 5^2]
y <- x[c(-2, -4)]         # Alle Komponenten außer 2 und 4, x[c(-2, -4)] = [1, 9, 25]
z <- x[c(-1, 2)]          # Gemischte Indizierung nicht erlaubt (Fehlermeldung)
```

Indizierung mit einem **logischen Vektor**
```{r, eval = F}
#| label: Bsp logischen Vektor
x <- c(1, 4, 9, 16, 25)   # [1, 4, 9, 16, 25] = [1^2, 2^2, 3^2, 4^2, 5^2]
y <- x[c(T, T, F, F, T)]  # TRUE Komponenten,  x[c(T, T, F, F, T)] = [1, 4, 25]
z <- x[x > 5]             # x > 5 = [F, F, T, T, T], x[x > 5] = [9, 16, 25]
```

Indizierung mit einem **character Vektor**
```{r, eval = F}
#| label: Bsp character Vektor
x <- c(1, 4, 9, 16, 25)   # [1,4,9,16,25] = [1^2, 2^2, 3^2, 4^2, 5^2]
names(x) <- c("a","b")    # Benennung der Komponenten als [a  b <NA> <NA> <NA>]
y <- x["a"]               # x["a"] = 1
```


# Anmerkungen zur Indizierung in R
\normalsize
R hat eine (zu) hohe Flexibilität bei Indizierung

\small
\vspace{1mm}

Out-of-range Indizes verursachen keine Fehler, sondern geben NA aus
\footnotesize
```{r, eval = F}
#| label: Out-of-rande Indizes
x <- c(1, 4, 9, 16, 25)  # [1, 4, 9, 16, 25] = [1^2, 2^2, 3^2, 4^2, 5^2]
y <- x[10]               # x[10] = NA (Not Applicable)
```

\vspace{1mm}

Nichtganzzahlige Indizes verursachen keine Fehler, sondern werden abgerundet
\footnotesize
```{r, eval = F}
#| label: Nicht-ganzahlige indizes
y <- x[4.9]              # x[4.9] = x[4] = 16
z <- x[-4.9]             # x[-4.9] = x[-4] = [1, 4, 9, 25]
```

\vspace{1mm}

Leere Indizes indizieren den gesamten Vektor
\footnotesize
```{r, eval = F}
#| label: leere Indizies
y <- x[]                 # y = x
```

\vfill


# Arithmetik ====================================== {.plain}
\AtBeginSection{}
\section{Arithmetik}

\large
\setstretch{2.5}
\vfill

Übersicht und Erzeugung

Charakterisierung

Indizierung

**Arithmetik**

Attribute

Übungen und Selbstkontrollfragen


# Elementweise Auswertung

\small
**\textcolor{darkblue}{Unitäre}** arithmetische Operatoren und Funktionen werden elementweise ausgewertet

\footnotesize
```{r, eval = F}
a <- seq(0, 1, len = 11) # a = [ 0.0, 0.1 , ..., 0.9, 1.0]
b <- -a                  # b = [-0.0, -0.1, ..., -0.9, -1.0]
v <- a^2                 # v = [ 0.0^2 ,  0.1^2 , ..., 0.9^2, 1.0^2]
w <- log(a)              # w = [ln(0.0), ln(0.1), ..., ln(0.9), ln(1.0)]
```

\small
**\textcolor{darkblue}{Binäre}** arithmetische Operatoren werden elementweise ausgewertet

\footnotesize
Vektoren gleicher Länge

```{r, eval = F}
#| label: Elementweise Auswertung gleichlange Vektoren
a <- c(1, 2, 3)          # a = [1,2,3]
b <- c(2, 1, 4)          # b = [2,1,4]
v <- a + b               # v = [1,2,3] + [2,1,4] = [1+2,2+1,3+4] = [3,3,7]
w <- a - b               # w = [1,2,3] - [2,1,4] = [1-2,2-1,3-4] = [-1, 1, -1]
x <- a * b               # x = [1,2,3] * [2,1,4] = [1*2,2*1,3*4] = [2, 2, 12]
y <- a / b               # y = [1,2,3] / [2,1,4] = [1/2,2/1,3/4] = [0.50, 2, 0.75]
```

\footnotesize
Vektoren und Skalare (= Vektoren der Länge 1)

```{r, eval = F}
#| label: Elementw Auswertung unterschiedlich Lange Vektoren
a <- c(1, 2, 3)        # a = [1,2,3]
b <- 2                 # b = [2]
v <- a + b             # v = [1,2,3] + [2,2,2] = [1+2,2+2,3+2] = [3, 4, 5]
w <- a - b             # w = [1,2,3] - [2,2,2] = [1-2,2-2,3-2] = [-1, 2, 1]
x <- a * b             # x = [1,2,3] * [2,2,2] = [1*2,2*2,3*2] = [2, 4, 6]
y <- a / b             # y = [1,2,3] / [2,2,2] = [1/2,2/2,3/2] = [0.5, 1, 1.5]
```


# Recycling
\small
\setstretch{1.4}

* R erlaubt (leider) auch Arithmetik mit Vektoren unterschiedlicher Länge

* Bei ganzzahligen Vielfachen der Länge wird der kürzere Vektor wiederholt. \footnotesize
  ```{r, eval = F}
  #| label: vielfaches
  x <- 1:2                # x = [1, 2], length(x) = 2
  y <- 3:6                # y = [3, 4, 5, 6], length(y) = 4
  v <- x + y              # v = [1, 2, 1, 2] + [3, 4, 5, 6] = [4, 6, 6, 8]
  ```

* \small Arithmetik von Vektoren und Skalaren ist ein Spezialfall dieses Prinzips.
  ```{r, eval = F}
  #| label: arithmethik mit Vielfaches
  x <- 1:3                # x = [1, 2, 3], length(x) = 3
  y <- 2                  # y = 2, length(y) = 1. y ist ein Skalar.
  v <- x + y              # v = [1, 2, 3] + [2, 2, 2] = [3, 4, 5]
  ```

* Andernfalls werden die ersten Komponenten des kürzeren Vektors wiederholt. \footnotesize
  ```{r, eval = F}
  #| label: nicht ganzzahliges Vielfaches
  x <- c(1, 3, 5)         # x = [1, 3, 5], length(x) = 3
  y <- c(2, 4, 6, 8, 10)  # y = [2, 4, 6, 8, 10], length(y) = 5
  v <- x + y              # v = [1, 3, 5, 1, 3] + [2, 4, 6, 8, 10] = [3, 7, 11, 9, 13]
  ```

\vfill
\center
\color{darkcyan}
**Generell sollten nur Vektoren gleicher Länge arithmetisch verknüpft werden!**

\vfill


# Fehlende Werte (NA)
\small
\setstretch{1.4}

* Fehlende Werte werden in R mit NA (not applicable) repräsentiert.

* Das Rechnen mit NAs ergibt (meist) wieder NA.
\setstretch{0.9}

\footnotesize
  ```{r, eval = T}
  #| label: multiply NA
  3 * NA                  # Multiplikation eines NA Wertes ergibt NA
  ```
  \vspace{2mm}
  ```{r, eval = T}
  #| label: compare NA
  NA < 2                  # Relationaler Vergleich eines NA Wertes ergibt NA
  ```
  \vspace{2mm}
  ```{r, eval = T}
  #| label: NA to the power
  NA^0                    # NA hoch 0 ergibt 1, weil jeder Wert hoch 0 eins ergibt (?)
  ```
  \vspace{2mm}
  ```{r, eval = T}
  #| label: bool with NA
  NA & FALSE              # NA UND FALSE  ergibt FALSE
  ```
  \vspace{2mm}


# Fehlende Werte (NA)
\small
\setstretch{1.4}

* Auf NA testet man mit `is.na()` \footnotesize
  ```{r, eval = T}
  #| label: test if NA
  x <- c(NA, 5, NA, 10)  # Vektor mit NAs
  x == NA                # Kein Testen auf NAs : 5 == NA ist NA, nicht FALSE
  is.na(x)               # Logisches Testen auf NA
  ```

\vfill


# Attribute ====================================== {.plain}
\AtBeginSection{}
\section{Attribute}

\large
\setstretch{2.5}
\vfill

Übersicht und Erzeugung

Charakterisierung

Indizierung

Arithmetik

**Attribute**

Übungen und Selbstkontrollfragen


# Attribute

Attribute sind Metadaten von R Objekten in Form von Schlüssel-Wert-Paaren

\vfill

\small
\textcolor{darkblue}{Attribute ausgeben lassen} mit `attributes()`


\tiny
```{r, eval = T}
#| label: attributes()
a <- 1:3                # Ein numerischer Vektor
attributes(a)           # Aufrufen aller Attribute
```
\small $\to$ Atomic vectors haben per se keine Attribute

\textcolor{darkblue}{Attribute aufrufen und definieren} mit `attr()`

\tiny
```{r, eval = T}
#| label: attr()
attr(a, "S") <- "W"     # a bekommt Attribut mit Schluessel S und Wert W
attr(a, "S")            # Das Attribut mit Schluessel S hat den Wert W
```

\vfill
\footnotesize
Anmerkung

\tiny
Attribute werden bei Operationen oft entfernt (Ausnahmen sind `names` und `dim`)
```{r, eval = T}
#| label: attributes removed
b <- a[1]               # Kopie des ersten Elements von a in Vektor b
attributes(b)           # Aufrufen aller Attribute von b
```


# Vektor-Elemente bezeichnen
\setstretch{0.9}

\small

Spezifikation des Attributs `names` gibt den Elementen eines Vektors Namen
\vspace{0.5mm}
\tiny
```{r, eval = T}
#| label: vektor names
v <- c(x = 1, y = 2, z = 3)  # Elementnamengeneration bei Vektorerzeugung
v                            # Vektorausgabe
```
\vspace{1.5mm}
\small

Die Namen können zur Indizierung benutzt werden
\vspace{0.5mm}
\tiny
```{r, eval = T}
#| label: index vector names
v["y"]                       # Indizierung per Namen
```
\vspace{1.5mm}
\small

Zum Definieren und zum Aufrufen von Namen kann auch `names()` benutzt werden
\vspace{0.5mm}
\tiny
```{r, eval = T}
#| label: names()
y <- 4:6                     # Erzeugung eines Vektors
names(y) <- c("a", "b", "c") # Definition von Namen
names(y)                     # Elementnamenaufruf
```
\vspace{1.5mm}
\small

Benannte Namen können hilfreich sein, wenn der Vektor eine Sinneinheit bildet
\vspace{0.5mm}
\tiny
```{r, eval = T}
#| label: Vektor als Sinneinheit
p <- c(age    = 31,          # Alter (Jahre), Groesse (cm), Gewicht (kg) einer Person
       height = 198, 
       weight = 75)
p                            # Vektorausgabe
```


# Übungen und Selbstkontrollfragen ====================================== {.plain}
\AtBeginSection{}
\section{Übungen und Selbstkontrollfragen}

\large
\setstretch{2.5}
\vfill

Übersicht und Erzeugung

Charakterisierung

Indizierung

Arithmetik

Attribute

**Übungen und Selbstkontrollfragen**


# Übungen und Selbstkontrollfragen
\vfill
\setstretch{2}
\small

1. Dokumentieren Sie die in dieser Einheit eingeführten R Befehle in einem R Skript.  
2. Überlegen Sie sich zu den gelernten Konzepten eigene Beispiele und dokumentieren Sie diese im R Skript aus SKF 1.
3. Beschreiben Sie in einer Übersicht die R Datenstruktur "Atomarer Vektor".
4. Erläutern Sie die Funktion des Colonoperators in R.
5. Nennen Sie vier Prinzipien der Indizierung in R.
6. Erzeugen Sie einen Vektor der Dezimalzahlen 0.0, 0.05, 0.10 , 0.15, ..., 0.90, 0.95, 1.0.
7. Wählen Sie mithilfe positiver Indices die Elemente 0.0, 0.1,..., 0.9, 1.0 dieses Vektors aus.  
8. Wählen Sie mithilfe negativer Indizes die Elemente 0.0, 0.1,..., 0.9, 1.0 dieses Vektors aus.  
9. Wählen Sie die letzten 10 Elemente dieses Vektors aus.
10. Erläutern Sie, was im Zusammenhang mit der Indizierung in R mit "zu hoher Flexibilität" gemeint ist


# Übungen und Selbstkontrollfragen
\vfill
\setstretch{2}
\small

11. Erläutern Sie den Begriff der Datentypangleichung (Coercion).
12. Erläutern Sie den Begriff des (Vektor)Recylings.
13. Erläutern Sie die Bedeutung des R Datentyps `NA`.
14. Erläutern Sie, wofür Attribute in R nützlich sind.

\vfill